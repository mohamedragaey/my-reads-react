{"version":3,"sources":["BooksAPI.js","Notifications.js","Components/Book/StarRating.jsx","Components/Book/BookMeta.jsx","Components/Book/BookCover.jsx","Components/Book/InfoButton.jsx","Components/Book/ShelfSelector.jsx","Components/Book/Book.jsx","Components/BookGroup/BookGroup.jsx","Components/Shelf/Shelf.jsx","Components/Bookshelf/BookShelf.jsx","Components/SearchBar/SearchBar.jsx","Components/SearchPage/SearchPage.jsx","App.jsx","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","errorMessage","UIkit","notification","message","status","timeout","StarRating","props","rating","full","floor","half","starCount","Object","toConsumableArray","Array","react_default","a","createElement","map","_","i","index_es","key","className","icon","faStar","faStarHalf","BookMeta","title","authors","author","defaultProps","BookCover","imageLinks","book","id","printType","pageCount","publishedDate","publisher","categories","style","width","height","src","thumbnail","alt","hidden","item","toLowerCase","InfoButton","type","data-uk-toggle","data-uk-icon","String","ShelfSelector","shelf","changed","defaultValue","onChange","evt","target","value","disabled","Book","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","prevState","changeBook","changeShelf","_this2","averageRating","Book_StarRating","Book_InfoButton","Book_BookCover","Book_ShelfSelector","setState","Book_BookMeta","Component","BookGroup","data-uk-grid","Book_Book_Book","Shelf","_props$shelf","BookGroup_BookGroup","Bookshelf","shelves","Components_Shelf_Shelf","Link","to","SearchBar","query","typing","method","objectSpread","Content-Type","body","JSON","stringify","results","newQuery","catch","preventDefault","_this3","data-uk-sticky","placeholder","onClick","clearInput","SearchPage","queryBooks","myBook","find","isArray","syncedBooks","syncBooks","SearchBar_SearchBar_SearchBar","href","length","data-uk-scroll","BooksApp","BooksAPI","newValue","includes","moveMessage","push","addMessage","filter","_this4","putBooksOnShelf","Route","exact","path","render","BookShelf","SearchPage_SearchPage_SearchPage","use","Icons","ReactDOM","BrowserRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.3ac14ec3.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import UIkit from 'uikit';\n\n\nfunction moveMessage(newValue) {\n    // Show notification for moving or removing book\n    newValue !== 'none'\n        ? UIkit.notification({ message: `Moved to \"${newValue}\"`, status: 'primary', timeout: 1000 }) // Move book\n        : UIkit.notification({ message: `Removed from library`, status: 'warning', timeout: 1000 });  // Remove book\n}\n\nfunction errorMessage() {\n    // Show notification for failed API request\n    UIkit.notification({ message: '<span data-uk-icon=\"warning\"></span> Connection Error', status: 'danger', timeout: 1000 })\n}\n\nfunction addMessage(newValue) {\n    // Show notification for adding a book from query\n    UIkit.notification({ message: `<span data-uk-icon=\"check\"></span> Added to \"${newValue}\"`, status: 'success', timeout: 1000 });\n}\n\n\nexport { moveMessage, errorMessage, addMessage };","// React imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar, faStarHalf } from '@fortawesome/free-solid-svg-icons';\n\nfunction StarRating(props) {\n    const rating = props.rating;        // Grab the passed rating\n    const full = Math.floor(rating);    // Get the highest whole count\n    const half = rating % 1;            // Get any fractional data\n    const starCount = [...Array(5)];    // Create a 5 star account\n\n    // Check if rating is defined\n    return props.rating ?\n        // Star count\n        (\n            <div>\n                {starCount.map((_, i) => {\n                    // Add full stars\n                    if (i + 1 <= full) {\n                        return <FontAwesomeIcon\n                            key={i}\n                            className=\"normal\"\n                            icon={faStar} />;\n                    }\n                    // Add half star\n                    else if (i + 1 === full + 1 && half !== 0) {\n                        return <FontAwesomeIcon\n                            key={i}\n                            className=\"normal\"\n                            icon={faStarHalf} />;\n                    }\n                    // Otherwise, add empty star\n                    else {\n                        return <FontAwesomeIcon\n                            key={i}\n                            className=\"empty\"\n                            icon={faStar}/>;\n                    }\n                })}\n            </div>\n        )\n        :\n        // Empty stars\n        (\n            <div>\n                <FontAwesomeIcon className=\"empty\" icon={faStar} />\n            </div>\n        )\n\n}\n\nStarRating.propTypes = {\n    rating: PropTypes.number\n}\n\nexport default StarRating;","// React imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction BookMeta(props) {\n    const {title, authors} = props;\n    return (\n        <div className=\" uk-margin-medium-top\">\n\n            {/* Book Title */}\n            <div className=\"uk-text-small uk-margin-small-bottom\">{title}</div>\n\n            {/* Book Authors */}\n            {authors\n                .map(author =>\n                    (\n                        <div\n                            key={author}\n                            className=\"uk-text-meta\">\n                            {author}\n                        </div>\n                    )\n                )\n            }\n        </div>\n    );\n}\n\nBookMeta.defaultProps = {\n    title: 'none',\n    authors: ['unkown']\n}\n\nBookMeta.propTypes = {\n    title: PropTypes.string,\n    authors: PropTypes.arrayOf(PropTypes.string)\n}\n\nexport default BookMeta;","// React imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction BookCover(props) {\n    const { imageLinks, book } = props;\n    const { id, printType, pageCount, publishedDate, publisher, categories } = book;\n\n    return (\n        <div>\n            {/* Book cover image */}\n            <img\n                className=\"book-cover\"\n                style={{ width: 128, height: 193 }}\n                src={imageLinks.thumbnail} alt=\"Not Available\">\n            </img>\n\n            <div id={`overlay${id}`} className=\"overlay uk-overlay uk-overlay-primary uk-position-cover uk-text-meta\" hidden>\n\n\n                <div className=\"uk-card uk-position-cover\">\n\n                    {/* Card Header */}\n                    <div className=\"uk-card-header uk-padding-remove uk-margin-medium-top\">\n\n                        {/* Page Count */}\n                        <p><small>Pages: {pageCount}</small></p>\n\n                        {/* Overlay badge */}\n                        <div className=\"uk-card-badge uk-label uk-position-top-right\">{printType}</div>\n                    </div>\n\n                    {/* Card Body */}\n                    <div className=\"uk-card-body uk-padding-remove\">\n\n                        {/* Published Date */}\n                        {publishedDate ? <p><small>Published: {publishedDate}</small></p> : ''}\n\n                        {/* Publisher */}\n                        { publisher ? <p><small>Publisher: {publisher}</small></p> : ''}\n                    </div>\n\n                    {/* Card Footer for categories */}\n                    {categories ?\n                        <div className=\"uk-card-footer uk-padding-remove uk-position-bottom\">\n                            {/* Heading */}\n                            <p className=\"uk-text-center\">Categories:</p>\n\n                            {/* list */}\n                            <p>{categories ? categories.map(item => (<small key={item}>{item.toLowerCase()}</small>)) : ''}</p>\n                        </div>\n                        : ''}\n                </div>\n\n\n                {/* Overlay data */}\n                <div className=\"uk-position-cover uk-margin-small-left uk-margin-small-top\">\n\n\n\n                </div>\n            </div>\n        </div>\n    );\n}\n\nBookCover.defaultProps = {\n    imageLinks: { thumbnail: 'http://i.imgur.com/J5LVHEL.jpg' }\n}\n\nBookCover.propTypes = {\n    imageLinks: PropTypes.objectOf(PropTypes.string).isRequired,\n    book: PropTypes.object.isRequired\n}\n\nexport default BookCover;","// React imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction InfoButton(props) {\n    return (\n        <button\n            className=\"info uk-position-absolute uk-icon-link\"\n            type=\"link\"\n            data-uk-toggle={`target: #overlay${props.id}; animation: uk-animation-slide-top-small`}\n            data-uk-icon=\"info\">\n        </button>\n    );\n}\n\nInfoButton.propTypes = {\n    id: PropTypes.string.isRequired\n}\n\nInfoButton.defaultProps = {\n    id: String(Math.random() * Math.floor(100))\n}\n\nexport default InfoButton;","// React imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ShelfSelector(props) {\n    const { shelf, changed } = props;\n\n    return (\n        <div className=\"book-shelf-changer\">\n            <select defaultValue={shelf} onChange={evt => changed(evt.target.value)}>\n                <option value=\"move\" disabled>Move to...</option>\n                <option value=\"currentlyReading\">Currently Reading</option>\n                <option value=\"wantToRead\">Want to Read</option>\n                <option value=\"read\">Read</option>\n                <option value=\"none\">None</option>\n            </select>\n        </div>\n    );\n}\n\nShelfSelector.propTypes = {\n    shelf: PropTypes.string,\n    changed: PropTypes.func.isRequired\n}\n\nShelfSelector.defaultProps = {\n    shelf: 'none'\n}\n\nexport default ShelfSelector;","// React imports\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n//Support imports\nimport './Book.css';\n// Component imports\nimport StarRating from './StarRating';\nimport BookMeta from './BookMeta';\nimport BookCover from './BookCover';\nimport InfoButton from './InfoButton';\nimport ShelfSelector from './ShelfSelector';\n\n/**\n * @class\n * Book element\n */\nexport default class Book extends Component {\n    /**\n     * Constructor\n     * @param {Object} props Passed from parent component\n     */\n    constructor(props) {\n        super();\n        this.state = {\n            shelf: props.book.shelf\n        }\n    }\n\n    // Set default values for properties\n    static defaultProps = {\n        book: {},\n        changeShelf: () => { }\n    };\n\n    // Set types for properties\n    static propTypes = {\n        book: PropTypes.object.isRequired,\n        changeShelf: PropTypes.func.isRequired\n    }\n\n    /**\n     * Component lifecycle: Control behavior after state update\n     * @param {Object} prevProps Props before update\n     * @param {Object} prevState State before update\n     */\n    componentDidUpdate(_, prevState) {\n        // Shelf value changed by user\n        if (prevState.shelf !== this.state.shelf) {\n            const changeBook = this.props.book;         // Get the book value\n            const shelf = this.state.shelf;             // Get the current shelf selector value\n            this.props.changeShelf(changeBook, shelf);  // Pass to parent component\n        }\n    }\n\n    /**\n     * Render component\n     */\n    render() {\n        const book = this.props.book;\n        const { id, title, authors, imageLinks, averageRating, } = book;\n\n        return (\n            <li>\n                <div className=\"book\">\n\n                    {/* Book Main */}\n                    <div className=\"book-top uk-flex-column\">\n\n                        {/* Star rating */}\n                        <StarRating rating={averageRating} />\n\n                        {/* Toggle info overlay button */}\n                        <InfoButton id={id} />\n\n                        {/* Book Cover */}\n                        <BookCover\n                            imageLinks={imageLinks}\n                            book={book} />\n\n                        {/* Book shelf selector */}\n                        <ShelfSelector\n                            shelf={this.state.shelf}\n                            changed={value => this.setState({ shelf: value })} />\n                    </div>\n\n                    {/* Book Meta */}\n                    <BookMeta title={title} authors={authors} />\n                </div>\n            </li>\n        )\n    }\n}","// React imports\nimport React from 'react';\nimport PropTypes from 'prop-types';\n//Componet imports\nimport Book from '../Book/Book'\n\nfunction BookGroup(props) {\n    const { books, changeShelf } = props;\n    return (\n        <ol className=\"uk-flex uk-flex-center\" data-uk-grid>\n            {books\n                .map(book =>\n                    <Book\n                        key={book.id}\n                        book={book}\n                        changeShelf={changeShelf} />)\n            }\n        </ol>\n    );\n}\n\nBookGroup.propTypes = {\n    books: PropTypes.array.isRequired,\n    changeShelf: PropTypes.func.isRequired\n}\n\nBookGroup.defaultProps = {\n    books: [],\n    changeShelf: () => {}\n}\n\nexport default BookGroup;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BookGroup from '../BookGroup/BookGroup';\nimport './Shelf.css';\n\n/**\n * Shelf element constructor\n * @param {Object} props Properties passed from parent component\n */\nfunction Shelf(props) {\n  const { title, books } = props.shelf  // Destruc properties\n\n  return (\n    <div className=\"uk-container uk-margin-small\">\n      <h2 className=\"bookshelf-title\">{title}</h2>\n      <BookGroup\n        books={books}\n        changeShelf={props.changeShelf} />\n    </div>\n  )\n}\n\n// Set default values for properties\nShelf.defaultProps = {\n  shelf: {\n    title: 'empty',\n    books: []\n  },\n  changeShelf: () => { }\n};\n\n// Set types for properties\nShelf.propTypes = {\n  shelf: PropTypes.object.isRequired,\n  changeShelf: PropTypes.func.isRequired\n}\n\nexport default Shelf;\n","// React imports\nimport React from 'react';\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom';\n\n// Support imports\nimport './Bookshelf.css';\n\n// Component imports\nimport Shelf from '../Shelf/Shelf';\n\n/**\n * Bookshelf constructor function\n * @param {Object} props Properties passed from parent component\n */\nfunction Bookshelf(props) {\n    return (\n        <div className=\"list-books\">\n            <div className=\"list-books-title\">\n                <h1>My Reads</h1>\n            </div>\n            <div className=\"list-books-content\">\n                <div>\n                    {props.shelves.map(shelf => <Shelf key={shelf.title} shelf={shelf} changeShelf={props.changeShelf} />)}\n                </div>\n            </div>\n            <div className=\"open-search\">\n                <Link to=\"/search\">Add a book</Link>\n            </div>\n        </div>\n    )\n}\n\n// Set default values for properties\nBookshelf.defaultProps = {\n    shelves: [\n        { title: \"Currently Reading\", books: [] },\n        { title: \"Want to Read\", books: [] },\n        { title: \"Read\", books: [] }\n    ],\n    changeShelf: () => { }\n}\n\n// Set types for properties\nBookshelf.propTypes ={\n    shelves: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        books: PropTypes.arrayOf(PropTypes.object)\n    })).isRequired,\n    changeShelf: PropTypes.func.isRequired\n}\n\nexport default Bookshelf;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport * as BooksAPI from '../../BooksAPI'\nimport './SearchBar.css';\nimport {errorMessage} from '../../Notifications'\n\n/**\n * @class\n * SearchBar element\n */\nexport default class SearchBar extends Component {\n\n    /**\n     * Constructor function\n     * @param {Object} props Properties from parent component\n     */\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            query: '',\n            typing: false\n        }\n    }\n\n    /**\n     * Compnent lifecycle: Handle behavior after state update\n     * @param {Object} prevProps Properties before update\n     * @param {Object} prevState State before update\n     */\n    componentDidUpdate(_, prevState) {\n        // Input value changed and it is not empty\n        if (prevState.query !== this.state.query && this.state.query !== '') {\n\n            this.setState({ typing: true });                        // Reveal clear button\n            // Use API to search for value\n            BooksAPI.search(this.state.query)\n                .then(results => (this.props.newQuery(results)))\n                .catch(errorMessage);   // Pass results to parent component\n        }\n\n        // Input value changed and is empty\n        if (prevState.query !== this.state.query && this.state.query === '') {\n            this.setState({ typing: false });                         // Hide clear button\n            this.props.newQuery(null);                              // Push up nothing to clear\n        }\n    }\n\n    /**\n     * Clear user input on click of clear button\n     * @param {Object} evt  Calling event\n     */\n    clearInput(evt) {\n        evt.preventDefault();\n        this.setState({ query: '' });\n    }\n\n    /**\n     * Render component\n     */\n    render() {\n        return (\n            <div\n                className=\"uk-box-shadow-xlarge uk-flex uk-background-default\"\n                data-uk-sticky=\"bottom: true; animation: uk-animation-slide-left-top\">\n\n                {/* Go back to main page link */}\n                <Link\n                    className=\"uk-icon-link\"\n                    to=\"/\"\n                    data-uk-icon=\"icon: arrow-left; ratio: 3\">\n                </Link>\n\n                {/* Search form */}\n                <form className=\"search-books-bar uk-search uk-width-1-1 uk-flex-inline uk-flex-middle\">\n\n                    {/* Search icon */}\n                    <span\n                        className=\"uk-margin-small-right uk-animation-scale-up uk-animation-fast\"\n                        hidden={this.state.typing}\n                        data-uk-icon=\"icon: search; ratio: 1.25\">\n                    </span>\n\n                    {/* Search iput */}\n                    <input\n                        value={this.state.query}\n                        className=\"uk-search-input\"\n                        type=\"search\"\n                        placeholder=\"Search by title or author\"\n                        onChange={evt => (this.setState({ query: evt.target.value }))} />\n\n                    {/* Search clear button */}\n                    <button\n                        className=\"uk-position-center-right uk-margin-small-right\"\n                        data-uk-icon=\"icon: close; ratio: 1.25\"\n                        hidden={!this.state.typing}\n                        onClick={evt => this.clearInput(evt)}>\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\n","// React imports\nimport React, { Component } from 'react';\n\n// Support imports\nimport './SearchPage.css';\n\n// Component imports\nimport SearchBar from '../SearchBar/SearchBar';\nimport BookGroup from '../BookGroup/BookGroup';\n\n/**\n * @class\n * SearchPage element\n */\nexport default class SearchPage extends Component {\n\n  /**\n   * Constructor\n   * @param {Object} props Properties passed from parent component\n   */\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      books: []\n    }\n  }\n\n  /**\n   * Sync main page books shelf data with query results if they match\n   * @param {Array} queryBooks Results from API query\n   * @returns {Array} List of queryBooks with matching shelf data from main page\n   */\n  syncBooks(queryBooks) {\n    return (\n      queryBooks.map(book => {\n\n        // Check if book matches any on main page\n        const myBook = this.props.books.find(item => item.id === book.id);\n\n        // Match found\n        if (myBook) {\n          book['shelf'] = myBook.shelf; // Add shelf propery to match main page value\n        }\n\n        return book;  // Push book into results\n      })\n    );\n  }\n\n  /**\n   * Changes state based on search results\n   * @param {Array} books List of search results \n   */\n  newQuery(books) {\n\n    // Defined results in array format\n    if (books && Array.isArray(books)) {\n\n      const syncedBooks = this.syncBooks(books);\n      this.setState({ books: syncedBooks });     // Change state to results\n    } else {\n      this.setState({ books: [] }); // Clear state\n    }\n  }\n\n  /**\n   * Render component\n   */\n  render() {\n    const books = this.state.books\n    return (\n      <div>\n        {/* Search bar element */}\n        <SearchBar newQuery={(book) => (this.newQuery(book))} />\n        {/* Search results container */}\n        <div className=\"uk-container uk-margin-large-top\">\n\n          {/* List of books from query */}\n          <BookGroup\n            books={books}\n            changeShelf={this.props.changeShelf} />\n\n        </div>\n\n        {/* Scroll to top link */}\n        <a\n          className=\"to-top uk-icon-link uk-animation-slide-bottom\"\n          href=\"#top\"\n          data-uk-icon=\"icon: chevron-up; ratio: 2.5\"\n          hidden={books.length < 1}\n          data-uk-scroll=\"duration: 250\">\n        </a>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom'\n\nimport * as BooksAPI from './BooksAPI';\nimport 'uikit/dist/css/uikit.css';\nimport './App.css';\nimport {moveMessage, errorMessage, addMessage} from './Notifications'\n\nimport Bookshelf from './Components/Bookshelf/BookShelf';\nimport SearchPage from './Components/SearchPage/SearchPage';\n\n/**\n * @class\n * App element\n */\nclass BooksApp extends Component {\n  state = {\n    books: [],\n  }\n\n  /**\n   * Component lifecycle: After render API request for data\n   */\n  componentDidMount() {\n    BooksAPI.getAll()\n      .then(books => this.setState({ books }))\n      .catch(errorMessage);\n  }\n\n  /**\n   * Component lifecycle: API request to use latest data on update \n   * @param {Object} prevProps Props prior to state update\n   * @param {Object} prevState State prior to state update\n   */\n  componentDidUpdate(_, prevState) {\n\n    // Check if item removed or added to control requests\n    if (prevState.books.length !== this.state.books.length) {\n\n      // Get all shelved books from API, then update state with results\n      BooksAPI.getAll()\n        .then(books => this.setState({ books }))\n        .catch(errorMessage);\n    }\n  }\n\n  /**\n   * Updates App state based on the change of Book element shelf selector\n   * @param {Object} changeBook The book to manipulate\n   * @param {String} newValue The new shelf value for the book\n   */\n  changeShelf(changeBook, newValue) {\n    // Push change to through API\n    BooksAPI.update(changeBook, newValue)\n    .catch(errorMessage);\n\n    // Update state\n    this.setState(prevState => {\n      let books = []; // For modifying data before pushing to state\n\n      // Book to change was not in the previous state\n      if (!prevState.books.includes(changeBook)) {      \n        changeBook['shelf'] = newValue;                 // Add and set the new shelf value\n        books.concat(prevState.books).push(changeBook); // Combine with the previous state\n\n        addMessage(newValue);\n      }\n      // Otherwise\n      else {\n        // Return a modified array from previous state\n        books = prevState.books.map(book => {\n\n          // Find the matching item\n          if (book === changeBook) {\n            book.shelf = newValue;  // Modify the shelf value\n            return book;            // Push into new array\n          }\n          else {\n            return book;            // Otherwise, push unmodified\n          }\n        })\n\n        moveMessage(newValue);\n      }\n\n      return { books }; // Pass new value to the state\n    });\n\n  }\n\n  /**\n   * Takes an array of books separates into corresponding shelves\n   * @param {Array} books Objects to seperate\n   * @returns {Array} of objects representing shelves\n   */\n  putBooksOnShelf(books) {\n\n    //Separate the books by shelf listed \n    const booksReading = books.filter(book => book.shelf === 'currentlyReading');\n    const booksWant = books.filter(book => book.shelf === 'wantToRead');\n    const booksRead = books.filter(book => book.shelf === 'read');\n\n\n    return [\n      {\n        title: 'Currently Reading',\n        books: booksReading\n      },\n      {\n        title: 'Want to Read',\n        books: booksWant\n      },\n      {\n        title: 'Read',\n        books: booksRead\n      }\n    ]\n  }\n\n  /**\n   * Render component\n   */\n  render() {\n    let shelves = this.putBooksOnShelf(this.state.books); // Separate books into shelf\n    return (\n      <div className=\"app\">\n        <Route exact path='/' render={() => (<Bookshelf shelves={shelves} changeShelf={(changeBook, newValue) => (this.changeShelf(changeBook, newValue))} />)} />\n        <Route path='/search' render={() => (<SearchPage books={this.state.books} changeShelf={(changeBook, newValue) => (this.changeShelf(changeBook, newValue))} />)} />\n      </div>\n    )\n  }\n}\n\nexport default BooksApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport BooksApp from './App';\nimport UIkit from 'uikit';\nimport Icons from 'uikit/dist/js/uikit-icons';\n\n\n// loads the Icon plugin\nUIkit.use(Icons);\n\nReactDOM.render(<BrowserRouter><BooksApp /></BrowserRouter>, document.getElementById('root'));\n"],"sourceRoot":""}